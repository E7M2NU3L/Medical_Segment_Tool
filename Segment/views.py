from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib import messages
from .forms import signUpForm, SegmentForm
from django.shortcuts import render
import numpy as np
import os
from keras.models import load_model

# Create your views here.
# 1. Home page
def home(request):
    return render(request, 'index.html')

# 2. Login Page
def login_user(request):

    # getting the Data
    if request.method == 'POST':
        email = request.POST['email']
        password = request.POST['password']

        # authenticate
        user = authenticate(request, email = email, password = password)
        if user is not None:
            login(request, user)
            messages.success(request, "You have been loggedin Successfully")
            return redirect('home')
        
        else:
            messages.error(request, "There was an error logging in...")
            return redirect('home')
        
    return render(request, 'login.html', {})

# 3. Register Page
def register(request):
    # getting the data
    if request.method == 'POST':
        form = signUpForm(request.POST)
        if form.is_valid():
            form.save()
            username = form.cleaned_data.get('email')
            raw_password = form.cleaned_data.get('password1')
            user = authenticate(username=username, password= raw_password)
            login(request, user)
            messages.success(request, "You have been registered Successfully")
            return redirect('home')
    else:
        form = signUpForm()
        config = {
            'form': form
        }
        return render(request,'signup.html', 
            config
        )
    
    return render(request,'signup.html', {'form': form})

# model for kidney segmentation made with UNET
# Segment_model = os.path.join(os.getcwd(), 'saved_models', 'segmenter.h5')
Segment_model = []

# 5. Segment Page
def segment(request):

    # initializing the elements of the output
    form = SegmentForm()
    image = None
    mask = None
    # chceking if the request is through POST
    if request.method == 'POST':
        form = SegmentForm(
            request.POST,
            request.FILES,
        )

        # display the files info in the form
        print(form.cleaned_data.get('File') | request.FILES)

        # checking if the form is valid
        if form.valid():
            # get the file and pre-process it
            image_data = SegmentForm.cleaned_data.get('File')
            image_data_2 = SegmentForm(
                request.FILES
            )

            # checking if the image recived isnot None
            if image_data is not None:
                image = np.array(image_data)

            else:    
                image = np.array(image_data_2)

            # segment the model and find the mask
            mask = Segment_model.predict(image)

            # check if prediction is perfect
            if mask is not None:
                # processing the mask generated by the UNET
                mask = np.array(mask)

            # configuration
            config = {
                'form': form,
                'image': image,
                'mask': mask
            }

            # items that has to be passed to the segmented_output route
            config_pass = {
                'image': image,
                'mask': mask,
            }

            # return the global function to the segment output route
            global segment_output
            def segment_output():
                return config_pass
            
            # return the segment.html along with the configuration passed as headers
            return render(request, 'segment.html', config)

    # config file for outer api
    configuration = {
        'form': form,
        'image': image,
        'mask': mask,
    }

    # return the context
    return render(request,'segment.html', configuration)

# 6. Project Page
def project(request):
    return render(request, 'project.html')


# 8. Segmented Output Page
def Segmented_output(request):

    # get the passed output from the segment route
    configuration = segment_output()

    # now pass the data as configuration to the output route
    return render(request,'seg_output.html', configuration)

# 9. logout
def logout_user(request):
    logout(request)
    messages.success(request, "You have been Logged out...")
    return redirect('home')

